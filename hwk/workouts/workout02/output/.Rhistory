ggplot(orderedframe, aes(x = reorder(team,salary), y = salary))  +
geom_bar(stat='identity', fill = grey) + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$salary), colour="red"), size = 2)  + ylab("Salary (in millions)") + xlab("Team") + ggtitle("NBA Teams ranked by Total Salary") + theme_minimal() + theme(legend.position="none")
library(ggplot2)
order_list <- order(teamfile$salary,decreasing = TRUE)
orderedframe <- teamfile[order_list,]
ggplot(orderedframe, aes(x = reorder(team,salary), y = salary))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$salary), colour="red"), size = 2)  + ylab("Salary (in millions)") + xlab("Team") + ggtitle("NBA Teams ranked by Total Salary") + theme_minimal() + theme(legend.position="none")
library(ggplot2)
ggplot(orderedframe, aes(x = reorder(team,salary), y = salary))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$salary), colour="red"), size = 2)  + ylab("Salary (in millions)") + xlab("Team") + ggtitle("NBA Teams ranked by Total Salary") + theme_minimal() + theme(legend.position="none")
library(ggplot2)
ggplot(teamfile, aes(x = reorder(team,salary), y = salary))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$salary), colour="red"), size = 2)  + ylab("Salary (in millions)") + xlab("Team") + ggtitle("NBA Teams ranked by Total Salary") + theme_minimal() + theme(legend.position="none")
library(ggplot2)
ggplot(teamfile, aes(x = reorder(team,points), y = points))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$points), colour="red"), size = 2)  + ylab("Points") + xlab("Team") + ggtitle("NBA Teams ranked by Total Points") + theme_minimal() + theme(legend.position="none")
ggplot(teamfile, aes(x = reorder(team,efficiency), y = efficiency))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$efficiency), colour="red"), size = 2)  + ylab("Total Efficiency") + xlab("Team") + ggtitle("NBA Teams ranked by Efficiency Score") + theme_minimal() + theme(legend.position="none")
knitr::opts_chunk$set(echo = TRUE)
teamfile = read.csv("../data/nba2018-teams.csv")
library(ggplot2)
ggplot(teamfile, aes(x = reorder(team,salary), y = salary))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$salary), colour="red"), size = 2)  + ylab("Salary (in millions)") + xlab("Team") + ggtitle("NBA Teams ranked by Total Salary") + theme_minimal() + theme(legend.position="none")
library(ggplot2)
ggplot(teamfile, aes(x = reorder(team,points), y = points))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$points), colour="red"), size = 2)  + ylab("Total Points") + xlab("Team") + ggtitle("NBA Teams ranked by Total Points") + theme_minimal() + theme(legend.position="none")
ggplot(teamfile, aes(x = reorder(team,efficiency), y = efficiency))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$efficiency), colour="red"), size = 2)  + ylab("Total Efficiency") + xlab("Team") + ggtitle("NBA Teams ranked by Efficiency Score") + theme_minimal() + theme(legend.position="none")
ggplot(teamfile, aes(x = reorder(team,fouls), y = fouls))  +
geom_bar(stat='identity', fill = "grey") + coord_flip() + geom_hline(aes(yintercept=mean(teamfile$fouls), colour="red"), size = 2)  + ylab("Fouls") + xlab("Team") + ggtitle("NBA Teams ranked by Fouls") + theme_minimal() + theme(legend.position="none")
??abs
set.seed(1234)
x = runif(5,0,1)
y = runif(5,0,1)
sum = 0
for(i in 1:length(x)){
sum = sum + abs(x[i] - y[i])
}
print(sum)
x
y
set.seed(1234)
x = runif(5,0,1)
y = runif(5,0,1)
sum = 0
for(i in 1:length(x)){
sum = sum + abs(x[i] - y[i])
}
print(sum)
2^2
2^(1/2)
2^(1/3)
set.seed(1234)
x = runif(5,0,1)
y = runif(5,0,1)
p = 1
sum = 0
for(i in 1:length(x)){
sum = sum + ((abs(x[i] - y[i]))^p)^(1/p)
}
print(sum)
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
print(max(max_values))
max_values
sum(max_values)
set.seed(1234)
x = runif(5,0,1)
y = runif(5,0,1)
p = 1
if(length(x) != length(y)){
print("x and y have different lengths")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + ((abs(x[i] - y[i]))^p)^(1/p)
}
print(sum)
# The infinity norm must be calculated seperately.
#
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
}
}
print(max(max_values))
set.seed(1234)
x = runif(5,0,1)
y = runif(5,0,1)
p = 1
if(length(x) != length(y)){
print("x and y have different lengths")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + ((abs(x[i] - y[i]))^p)^(1/p)
}
print(sum)
# The infinity norm must be calculated seperately.
#
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
print(max(max_values))
}
}
set.seed(1234)
x = runif(5,0,1,0)
y = runif(5,0,1)
p = 1
if(length(x) != length(y)){
print("x and y have different lengths")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + ((abs(x[i] - y[i]))^p)^(1/p)
}
print(sum)
# The infinity norm must be calculated seperately.
#
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
print(max(max_values))
}
}
set.seed(1234)
x = runif(6,0,1)
y = runif(5,0,1)
p = 1
if(length(x) != length(y)){
print("x and y have different lengths")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + ((abs(x[i] - y[i]))^p)^(1/p)
}
print(sum)
# The infinity norm must be calculated seperately.
#
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
print(max(max_values))
}
}
minkowski <- function(x,y,p){
if(length(x) != length(y)){
print("x and y have different lengths")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + ((abs(x[i] - y[i]))^p)^(1/p)
}
return(sum)
# The infinity norm must be calculated seperately.
#
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
return(max(max_values))
}
}
}
minkowski(x,y,1)
x = runif(5,0,1)
y = runif(5,0,1)
minkowski(x,y,1)
minkowski(x,y,1)
minkowski(x,y,2)
minkowski(x,y,3)
minkowski <- function(x,y,p){
if(length(x) != length(y)){
print("x and y have different lengths")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + (abs(x[i] - y[i]))^p
}
return((sum)^(1/p))
# The infinity norm must be calculated seperately.
#
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
return(max(max_values))
}
}
}
minkowski(x,y,1)
minkowski(x,y,2)
minkowski(x,y,3)
minkowski(x,y,4)
minkowski(x,y,5)
minkowski(x,y,6)
minkowski(x,y,"max")
minkowski <- function(x,y,p){
if(length(x) != length(y)){
print("x and y have different lengths")
}
if(is.character(p) == TRUE){
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
return(max(max_values))
}
else{
stop("invalid character value for p")
}
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + (abs(x[i] - y[i]))^p
}
return((sum)^(1/p))
# The infinity norm must be calculated seperately.
#
}
}
minkowski(x,y,"max")
minkowski(x,y,"p")
minkowski(x,y,"lop")
minkowski <- function(x,y,p){
if(length(x) != length(y)){
print("x and y have different lengths")
}
if(is.character(p) == TRUE){
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
return(max(max_values))
}
else{
stop("invalid character value for p")
}
} else if(is.numeric(p)){
if(p < 1){
stop("p cannot be less than 1")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + (abs(x[i] - y[i]))^p
}
return((sum)^(1/p))
}
# The infinity norm must be calculated seperately.
#
}
}
minkowski(x,y,1)
minkowski(x,y,2)
minkowski(x,y,"max")
minkowski(x,y,"purple")
minkowski(x,y,1)
minkowski(x,y,.4)
minkowski <- function(x,y,p = FALSE){
if(p == FALSE){
sum = 0
for(i in 1:length(x)){
sum = sum + (abs(x[i] - y[i]))
}
return(sum)
}else{
if(length(x) != length(y)){
print("x and y have different lengths")
}
if(is.character(p) == TRUE){
if(p =="max"){
max_values = c()
for(i in 1:length(x)){
max_values <- c(max_values,(abs(x[i] - y[i])))
}
return(max(max_values))
}
else{
stop("invalid character value for p")
}
} else if(is.numeric(p)){
if(p < 1){
stop("p cannot be less than 1")
} else{
sum = 0
for(i in 1:length(x)){
sum = sum + (abs(x[i] - y[i]))^p
}
return((sum)^(1/p))
}
# The infinity norm must be calculated seperately.
#
}
}
}
minkowski(x,y)
minkowski(x,y,1)
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
expect_length(minkowski(point1, point2, p = 1), 1)
expect_type(minkowski(point1, point2, p = 1), 'double')
expect_error(minkowski(point4, point5, p = 1))
expect_error(minkowski(point1, point2, p = 0.5))
expect_error(minkowski(point1, point2, p = 'min'))
})
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
setwd("~/Concepts-in-Computing-with-Data/hwk/workouts/workout02/output")
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
library(stringr)
hex <- "#FF00A7"
print(str_match(hex,"#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
print(str_detect(hex,"#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
hex <- "#1234GF"
print(str_detect(hex,"#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
is_hex <- function(hex){
if(is.character(hex) == FALSE){
stop("invalid input; a string was expected")
}
return(str_detect(hex,"#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
}
is_hex <- function(hex){
if(is.character(hex) == FALSE){
stop("invalid input; a string was expected")
} else{
return(str_detect(hex,"#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
}
}
is_hex(FALSE)
is_hex(ABC)
is_hex(FF00A7)
is_hex(FF00A7)
is_hex <- function(hex){
if(is.character(hex) == FALSE | length(hex)!= 1){
stop("invalid input; a string was expected")
} else{
return(str_detect(hex,"#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
}
}
is_hex(FF00A7)
is_hex(FALSE)
is_hex("#1234GF")
phrase = "Was it a car or a cat I saw"
phrase[1]
phrase[[1]]
phrase[[2]]
strsplit(phrase)
strsplit(phrase, split = "")
phrase = "Was it a car or a cat I saw"
letters <- strsplit(phrase, split = "")
print(letters(1:4))
phrase = "Was it a car or a cat I saw"
letters <- strsplit(phrase, split = "")
print(letters[1:4])
phrase = "Was it a car or a cat I saw"
letters <- strsplit(phrase, split = "")
print(letters[[1:4]])
letters
letters[1]
letters[[1]]
typeof(letters)
letters[1,1]
letters[[1,1]]
letters[[1,]]
letters[[1]]
phrase = "Was it a car or a cat I saw"
letters <- c(strsplit(phrase, split = ""))
letters
letters[2]
letters[[1]][1]
length(letters[[1]])
letters[[1]][27:1]
paste(letters[[1]][27:1], collapse =  "")
phrase = "Was it a car or a cat I saw?"
letters <- c(strsplit(phrase, split = ""))
reverse_letters <- letters[[1]][length(letters[[1]]):1]
reverse_string <- paste(reverse_letters, collapse = "")
print(reverse_string)
phrase = "step on no pets"
reverse_chars <- function(phrase){
letters <- c(strsplit(phrase, split = ""))
reverse_letters <- letters[[1]][length(letters[[1]]):1]
reverse_string <- paste(reverse_letters, collapse = "")
return(reverse_string)
}
reverse_chars(phrase)
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
phrase = "The quick brown fox jumps over the lazy dog"
x <- tolower(strsplit(phrase, "")[[1]])
x <- x[x %in% letters]
x
phrase = "The quick brown fox jumps over the lazy dog"
x <- tolower(strsplit(phrase, "")[[1]])
x
x[x %in% letters]
table(x[x %in% letters])
x %in% letters
letters
help(letters)
rm(letters)
letters
phrase = "The quick brown fox jumps over the lazy dog"
x <- tolower(strsplit(phrase, "")[[1]])
x <- x[x %in% letters]
x
table(x)
phrase = "The quick brown fox jumps over the lazy dog"
x <- tolower(strsplit(phrase, "")[[1]])
x <- x[x %in% letters]
x <- table(x)
x
s$a
x$a
x[1]
x["a"]
x[c("a","e")]
x[c("a", "e", "i", "o", "u")]
count_vowels <- function(y){
x <- tolower(strsplit(y, "")[[1]])
x <- table(x[x %in% letters])
return(x[c("a", "e", "i", "o", "u")])
}
count_vowels(phrase)
count_vowels(phrase)[1]
count_vowels(phrase)[1] ==c(1,3,1,4,2)
count_vowels(phrase)==c(1,3,1,4,2)
counts <- c("a", "e", "i", "o", "u")
count_vowels(phrase)==counts
counts
counts <- c(1, 3, 1, 4, 2)
count_vowels(phrase)==counts
length(count_vowels(phrase))
phrase = "do or do not"
length(count_vowels(phrase))
count_vowels(phrase)
count_vowels(phrase)['a']
count_vowels(phrase)['o']
length(count_vowels(phrase)['o'])
nchar(count_vowels(phrase)['o'])
count_vowels <- function(y){
if(is.character(y) == FALSE){
stop("invalid input, a string was expected")
} else{
x <- tolower(strsplit(y, "")[[1]])
x <- table(x[x %in% letters])
return(x[c("a", "e", "i", "o", "u")])
}
count_vowels(abs)
count_vowels <- function(y){
if(is.character(y) == FALSE){
stop("invalid input, a string was expected")
} else{
x <- tolower(strsplit(y, "")[[1]])
x <- table(x[x %in% letters])
return(x[c("a", "e", "i", "o", "u")])
}
}
count_vowels <- function(y){
if(is.character(y) == FALSE){
stop("invalid input, a string was expected")
} else{
x <- tolower(strsplit(y, "")[[1]])
x <- table(x[x %in% letters])
return(x[c("a", "e", "i", "o", "u")])
}
}
count_vowels(abs)
count_vowels(TRUE)
typeof(count_vowels(phrase))
vowels <- c('a', 'e', 'i', 'o', 'u')
counts <- c(1, 3, 1, 4, 2)
names(counts) <- vowels
counts
counts["a"]
count_vowels("FOX")

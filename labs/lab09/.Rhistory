to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert <- function(x = 1, to = casefold("celsius")) {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'Celsius')
temp_convert <- function(x = 1, to = "celsius") {
switch(casefold(to),
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
b = c()
for(i in 1:10){
b <- c(b,paste("file",i,".csv"))
}
print(b)
b = c()
for(i in 1:10){
b <- c(b,paste0("file",i,".csv"))
}
print(b)
paste0("file",1:10,".csv")
gaussian <- function(s,m,x){
if(s <= 0){
stop("Error. Please enter valid parameter values")
}
else{
return((1/(sigma*sqrt(2*pi)))*exp(-.5*((x-mu)/sigma)^2))
}
}
gaussian(2,0,1)
gaussian <- function(s,m,x){
if(s <= 0){
stop("Error. Please enter valid parameter values")
}
else{
return((1/(s*sqrt(2*pi)))*exp(-.5*((x-m)/s)^2))
}
}
gaussian(2,0,1)
dnorm(1,0,2)
x_values <- seq(-4.5,4.5,0.1)
y_values <- gaussian(2,0,x_values)
plot(x_values, y_values, las = 1, type = "l", lwd = 2)
help(quartile)
??quartile
??IQR
help(sd)
descriptive <- function(input,na.rm = FALSE){
info = list("min" = min(input),
"first quartile" =  quantile(input, 0.25),
"median" = median(input),
"mean" = mean(input),
"thrid quartile" = quantile(input, 0.75),
"max" = max(input),
"range" = max(input) - min(input),
"interquartile range" = IQR(input),
"standard deviation" = sd(input))
return(info)
}
set.seed(123)
x <- rnorm(100)
descriptive(x)
find_distance <- function(p1,p2){
return(sqrt((p2[2] - p1[2])^2 + (p2[1] - p1[1])^2))
}
find_midpoint <- function(p1,p2){
return(c((p1[1] + p2[1])/2, (p2[1] + p2[2])/2))
}
find_slope <- function(p1,p2){
return((p2[2] - p1[2])/(p2[1] - p1[1]))
}
find_intercept <- function(p1,p2){
return(p1[2] - find_slope(p1,p2)*p1[1])
}
find_line <- function(p1,p2){
return(list("intercept" = find_intercept(p1,p2),
"slope" = find_slope(p1,p2)))
}
info_points <- function(p1,p2){
return(list("distance" = find_distance(p1,p2),
"midpoint" = find_midpoint(p1,p2),
"intercept" = find_intercept(p1,p2),
"results" = find_slope(p1,p2)))
find_distance <- function(p1,p2){
return(sqrt((p2[2] - p1[2])^2 + (p2[1] - p1[1])^2))
}
find_midpoint <- function(p1,p2){
return(c((p1[1] + p2[1])/2, (p2[1] + p2[2])/2))
}
find_slope <- function(p1,p2){
return((p2[2] - p1[2])/(p2[1] - p1[1]))
}
find_intercept <- function(p1,p2){
return(p1[2] - find_slope(p1,p2)*p1[1])
}
find_line <- function(p1,p2){
return(list("intercept" = find_intercept(p1,p2),
"slope" = find_slope(p1,p2)))
}
info_points <- function(p1,p2){
return(list("distance" = find_distance(p1,p2),
"midpoint" = find_midpoint(p1,p2),
"intercept" = find_intercept(p1,p2),
"results" = find_slope(p1,p2)))
}
p1 <- c(-2,4)
p2 <- c(1,2)
find_distance(p1,p2)
find_line(p1,p2)
eq <- find_distance(p1,p2)
eq$distance
eq
eq <- find_line(p1,p2)
eq$distance
eq
eq$intercept
eq$slope
p1 <- c(-2,4)
p2 <- c(1,2)
results <- info_points(p1,p2)
results$distance
results$midpoint
results$midpoint[0]
results$midpoint[1]
results$midpoint[2]
p1 <- c(-2, 4)
p2 <- c(1, 2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(-1/2, 3, cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = 8/3, b = -2/3, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', (-2/3) * x, ' + ', (8/3))))
is_integer <- function(x){
if(x %% 1 == 0){
return(TRUE)
} else{
return(FALSE)
}
}
is_integer(-1)
is_integer(0)
is_integer(2L)
is_integer(2)
is_integer(2.1)
is_integer(pi)
is_integer(0.01)
is_integer('a')
is_positive <- function(x){
if(x > 0){
return(TRUE)
} else{
return(FALSE)
}
}
is_positive(0.01)
is_positive(2)
is_positive(-2)
is_positive(0)
is_nonnegative <- function(x){
if(x>= 0){
return(TRUE)
} else{
return(FALSE)
}
}
is_nonnegative(0)
is_nonnegative(2)
is_nonnegative(-.00001)
is_nonnegative(-2)
is_positive_integer <- function(x){
if(is_integer(x) == TRUE & is_positive(x) == TRUE){
return(TRUE)
} else{
return(FALSE)
}
}
is_positive_integer(2)
is_positive_integer(2L)
is_positive_integer(0)
is_positive_integer(-2)
is_nonneg_integer <- function(x){
if(is_nonnegative(x) == TRUE & is_integer(x) == TRUE){
return(TRUE)
}
else{
return(FALSE)
}
}
is_nonneg_integer(0)
is_nonneg_integer(1)
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
is_nonneg_integer(2.5)
is_probability <- function(x){
if(x >= 0 & x <= 1){
return(TRUE)
} else{
return(FALSE)
}
}
is_probability(0)
is_probability(.5)
is_probability(1)
is_probability(-1)
is_probability(1.00000001)
length(9)
bin_factorial <- function(x){
total = 1
for(i in 1:x){
total <- total * i
}
return(total)
}
bin_factorial(5)
bin_factorial(0)
bin_factorial <- function(x){
if(x == 0){
return(1)
} else{
total = 1
for(i in 1:x){
total <- total * i
}
return(total)
}
}
bin_factorial(5)
bin_factorial(0)
bin_combinations <- function(n,k){
return(bin_factorial(n)/(bin_factorial(k) * bin_factorial(n-k)))
}
bin_combinations(n = 5, k = 2)
bin_combinations(10,3)
bin_combinations(4,4)
??choose
??binomialcoefficient
choose(5,2)
choose(10,3)
choose(4,4)
bin_probability <- function(trials, success, prob){
if(is_nonneg_integer(trials) == FALSE | is_nonneg_integer(success) == FALSE){
if(is_nonneg_integer(trials) == TRUE){
stop("Invalid trials value")
}else{
stop("Invalid success value")
}else{
if(is_probability(prob) == FALSE){
stop("Invalid probability value")
}
}
}else{
return(bin_combinations(trials, success) * (prob^trials) * ((1-prob)^(n-k)))
}
}
bin_probability <- function(trials, success, prob){
if(is_nonneg_integer(trials) == FALSE | is_nonneg_integer(success) == FALSE){
if(is_nonneg_integer(trials) == TRUE){
stop("Invalid trials value")
}else{
stop("Invalid success value")
}
}
else if(is_probability(prob) == FALSE){
stop("Invalid probability value")
}
else{
return(bin_combinations(trials, success) * (prob^trials) * ((1-prob)^(n-k)))
}
}
bin_probability(0,2,.5)
bin_probability <- function(trials, success, prob){
if(is_nonneg_integer(trials) == FALSE | is_nonneg_integer(success) == FALSE){
if(is_nonneg_integer(trials) == TRUE){
stop("Invalid trials value")
}else{
stop("Invalid success value")
}
}
else if(is_probability(prob) == FALSE){
stop("Invalid probability value")
}
else{
return(bin_combinations(trials, success) * (prob^trials) * ((1-prob)^(trials-success)))
}
}
bin_probability(0,2,.5)
bin_combinations(0,2)
bin_probability(5,2,.5)
bin_probability(5,6,.5)
bin_probability <- function(trials, success, prob){
if(success > trials){
stop("Invalid number of trials")
}
else if(is_nonneg_integer(trials) == FALSE | is_nonneg_integer(success) == FALSE){
if(is_nonneg_integer(trials) == TRUE){
stop("Invalid trials value")
}else{
stop("Invalid success value")
}
}
else if(is_probability(prob) == FALSE){
stop("Invalid probability value")
}
else{
return(bin_combinations(trials, success) * (prob^trials) * ((1-prob)^(trials-success)))
}
}
bin_probability(5,6,.5)
bin_probability(0,2,.5)
bin_probability(5,2.5,.5)
help(dataframe)
??DataFrame
bin_distribution <- function(trials, prob){
probability <- rep(0,trials)
success <- seq(1,trials,1)
for( i in 1:trials){
probability[i] <- bin_probability(trials, i, prob)
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials)
success <- seq(0,trials,1)
for( i in 0:length(success)+1){
probability[i] <- bin_probability(trials, (i-1), prob)
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials)
success <- seq(1,trials,1)
for( i in 0:length(success)+1){
probability[i] <- bin_probability(trials, i, prob)
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials)
success <- seq(1,trials,1)
for( i in 0:length(success)){
probability[i] <- bin_probability(trials, i, prob)
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials)
success <- seq(0,trials,1)
for( i in 0:length(success)){
probability[i+1] <- bin_probability(trials, i, prob)
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
length(success)
seq(0,5,1)
for(i in 0:length(success)){print(i)}
for(i in 0:6){print(i)}
bin_distribution <- function(trials, prob){
probability <- rep(0,trials)
success <- seq(0,trials,1)
for( i in 0:length(success)-1){
probability[i+1] <- bin_probability(trials, i, prob)
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_distribution(trials = 5, prob = .5)
rep(0,5)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials+1)
success <- seq(0,trials,1)
for( i in 0:length(success)-1){
probability[i+1] <- bin_probability(trials, i, prob)
print(probability[i+1])
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_probability <- function(trials, success, prob){
if(success > trials){
stop("Invalid number of trials")
}
else if(is_nonneg_integer(trials) == FALSE | is_nonneg_integer(success) == FALSE){
if(is_nonneg_integer(trials) == FALSE){
stop("Invalid trials value")
}else{
stop("Invalid success value")
}
}
else if(is_probability(prob) == FALSE){
stop("Invalid probability value")
}
else{
return(bin_combinations(trials, success) * (prob^trials) * ((1-prob)^(trials-success)))
}
}
#'@title Binomial distribution
#'@description creates a distribution, given
#'a number of trials and a probability value,
#'of different success rates
#'@param trials. number of trials (numeric)
#'@param prob. Probability of success for a trial (numeric)
#'@return dataframe of distributions (list)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials+1)
success <- seq(0,trials,1)
for( i in 0:length(success)-1){
probability[i+1] <- bin_probability(trials, i, prob)
print(probability[i+1])
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
is_nonneg_integer(5)
is_non_neg_integer(0)
is_nonneg_integer(0)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials+1)
success <- seq(0,trials,1)
for( i in 0:length(success)-1){
print(i)
probability[i+1] <- bin_probability(trials, i, prob)
print(probability[i+1])
}
return(data.frame("success" = success, "probability" = probability))
}
is_nonneg_integer(0)
bin_distribution(trials = 5, prob = .5)
bin_distribution <- function(trials, prob){
probability <- rep(0,trials+1)
success <- seq(0,trials,1)
for( i in 0:(length(success)-1)){
print(i)
probability[i+1] <- bin_probability(trials, i, prob)
print(probability[i+1])
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_combinations(5,0)
.5^5
bin_distribution <- function(trials, prob){
probability <- rep(0,trials+1)
success <- seq(0,trials,1)
for( i in 0:(length(success)-1)){
print(i)
print(trials)
probability[i+1] <- bin_probability(trials, i, prob)
print(probability[i+1])
}
return(data.frame("success" = success, "probability" = probability))
}
bin_distribution(trials = 5, prob = .5)
bin_probability <- function(trials, success, prob){
if(success > trials){
stop("Invalid number of trials")
}
else if(is_nonneg_integer(trials) == FALSE | is_nonneg_integer(success) == FALSE){
if(is_nonneg_integer(trials) == FALSE){
stop("Invalid trials value")
}else{
stop("Invalid success value")
}
}
else if(is_probability(prob) == FALSE){
stop("Invalid probability value")
}
else{
return(bin_combinations(trials, success) * (prob^success) * ((1-prob)^(trials-success)))
}
}
bin_distribution(trials = 5, prob = .5)
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
